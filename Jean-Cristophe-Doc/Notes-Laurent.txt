--------------------
Notes de C++ avec JC
--------------------

was is c++?

1970

- C avec de l'orienté objet
- Templates
- pleins, pleins dautres affaire




int b[10];		// OLD C
std::array<int, 10> a;	// c++ standard

int b[2][3];
std::array<std::array<int , 2>, 3>> b;		// syntaxe dégueuse
using std::array<std::array<int , 2>, 3>> b;	// on peut utiliser "using" pour cleaner la syntaxe
b swag;




C++ offre toujorus trois choix de variables:

int a{};	// valeur
int *b{};	// pointer -> toujours 32bit
int &c {a};	// référence -> alias pour une variable éxistante

Quand est-ce qu'on utilie ça?

une référence est un alias pour une autre variable
&c est une constante(lecture seule) qui doit être initialiser avant avant le runtime
-Utilisé surtout dans les fonctions pour quand tu veux passer en paramètre des variables
int a;
f(int & a)
f(a) // bueno
-Utile quand tu veux éviter de faire:
if pointer != null
	do stuff

EXEMPLE POUR DÉCERNER SI TU VEUX UN POITEUR OU UNE REF
------------------------------------------------------

int t[4];	// t = pointeur d'entier
int *h{t};

g[2] = -1	// 1: sugar syntaxe
h[2] = -1
*(g+2) = -1	// 2: arithmetic des pointeurs

-----------------
int t[2][3];	// t = pointeur de pointeur d'entier

t[1][1] = 2
*(t + 1*3 + 1) = 2;	// ouille

Comment init ce tableau à 0 ?
****************************
#v1 noob // 7 opération par boucle
for(int i{}; i < 2; ++i){
	for (int j{}; i < 3; ++j){
		t[i][j] = 0;
	}
}


#v2 pro // 3 opération par boucle

int * cur{t};		// pointe vers la première adresse
int * end{t+2*3};	// pointe vers la dernière adresse
while(cur < end){
	*curr = 0;
	cur++
} 


struct Individu: {
	int age;
	char nom[25];
	double taille;
}

Individu v;

v.age = 30; 	// sugar syntax
v.taille = 3.14; 	

*(int *)&v = 30;// truth
*(double*)((char*)((int *)&v + 1)+f32) = 3.14;// truth

L'opérateur "." fait toujours 3 opérations.









